
# name: CI/CD Pipeline with Versioning, Rolling Update, and Rollback

# on:
#   push:
#     branches:
#       - master

# permissions:
#   contents: write

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#   tag-and-release:
#     needs: test
#     runs-on: ubuntu-latest
#     outputs:
#       version_tag: ${{ steps.set_tag.outputs.version_tag }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Get next version tag
#         id: set_tag
#         run: |
#           TAG=$(git tag --sort=-v:refname | head -n1)
#           echo "Latest tag: $TAG"

#           if [ -z "$TAG" ]; then
#             NEW_TAG="1.0.0"
#           else
#             IFS='.' read -r MAJOR MINOR PATCH <<< "${TAG#v}"
#             MINOR=$((MINOR + 1))
#             PATCH=0
#             NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
#           fi

#           echo "version_tag=$NEW_TAG" >> $GITHUB_OUTPUT

#       - name: Set up Ruby
#         uses: ruby/setup-ruby@v1
#         with:
#           ruby-version: 3.2.8
#           bundler-cache: true

#       - name: Install dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y ruby-dev build-essential libssl-dev

#       - name: Run RSpec test suite
#         run: bundle exec rspec

#       - name: Create Git tag
#         env:
#           GH_PAT: ${{ secrets.GH_PAT }}
#         run: |
#           git config user.name "GitHub Actions"
#           git config user.email "actions@github.com"
#           git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}
#           git tag "v${{ steps.set_tag.outputs.version_tag }}"
#           git push origin "v${{ steps.set_tag.outputs.version_tag }}"

#   build-and-deploy:
#     needs: tag-and-release
#     runs-on: ubuntu-latest
#     env:
#       VERSION: ${{ needs.tag-and-release.outputs.version_tag }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v4
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/sanity:${VERSION} .
#           docker push ${{ secrets.DOCKER_USERNAME }}/sanity:${VERSION}

#       - name: Replace version placeholder in deployment and service manifests
#         run: |
#           mkdir -p k8s
#           sed "s/__VERSION__/${VERSION}/g" deployment.yaml > k8s/deployment-updated.yaml
#           sed "s/__VERSION__/${VERSION}/g" sinatraservice.yaml > k8s/service-updated.yaml

#       - name: Setup Minikube (EC2 context)
#         uses: appleboy/ssh-action@v0.1.6
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             minikube start --driver=docker || true

#       - name: Copy manifests to EC2
#         uses: appleboy/scp-action@v0.1.6
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           source: "k8s/*.yaml"
#           target: "/home/${{ secrets.EC2_USER }}/k8s/"

#       - name: Apply manifests on EC2 via kubectl
#         uses: appleboy/ssh-action@v0.1.6
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             kubectl apply -f /home/${{ secrets.EC2_USER }}/k8s/deployment-updated.yaml
#             kubectl apply -f /home/${{ secrets.EC2_USER }}/k8s/service-updated.yaml
#             kubectl rollout status deployment/sinatra-v1 --timeout=120s

#       - name: Install Prometheus
#         uses: appleboy/ssh-action@v0.1.6
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             kubectl create namespace prometheus || true
#             kubectl apply -f https://raw.githubusercontent.com/melvinsamuel070/prometheus-monitoring/main/prometheus-deployment.yaml -n prometheus
#             kubectl apply -f https://raw.githubusercontent.com/melvinsamuel070/prometheus-monitoring/main/prometheus-service.yaml -n prometheus

#       - name: Install Grafana
#         uses: appleboy/ssh-action@v0.1.6
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             kubectl create namespace grafana || true
#             kubectl apply -f https://raw.githubusercontent.com/melvinsamuel070/prometheus-monitoring/main/grafana-deployment.yaml -n grafana
#             kubectl apply -f https://raw.githubusercontent.com/melvinsamuel070/prometheus-monitoring/main/grafana-service.yaml -n grafana

#   rollback:
#     if: failure()
#     runs-on: ubuntu-latest
#     steps:
#       - name: Rollback deployment on EC2 via kubectl
#         uses: appleboy/ssh-action@v0.1.6
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USER }}
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             echo "Rolling back deployment sinatra-v1"
#             kubectl rollout undo deployment/sinatra-v1
#             kubectl rollout status deployment/sinatra-v1 --timeout=120s








name: CI/CD Pipeline with Versioning, Rolling Update, and Rollback

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  # minikube:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Start Minikube
  #       id: minikube
  #       uses: hiberbee/github-action-minikube@latest

      # Removed duplicate manual install/start of Minikube for simplicity
      # You can add manual start if needed, but the action usually covers it

      # - name: Get Minikube IP
      #   run: echo ${{ steps.minikube.outputs.ip }}


  tag-and-release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
     version_tag: ${{ steps.set_tag.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get next version tag
        id: set_tag
        run: |
         TAG=$(git tag --sort=-v:refname | head -n1)
         echo "Latest tag: $TAG"

         if [ -z "$TAG" ]; then
          NEW_TAG="1.0.0"
         else
          IFS='.' read -r MAJOR MINOR PATCH <<< "${TAG#v}"
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          NEW_TAG="${MAJOR}.${MINOR}.${PATCH}"
         fi

         echo "version_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
         ruby-version: 3.2.8
         bundler-cache: true

      - name: Install dependencies
        run: |
         sudo apt-get update
         sudo apt-get install -y ruby-dev build-essential libssl-dev

      - name: Run RSpec test suite
        run: bundle exec rspec

      - name: Create Git tag
        env:
         GH_PAT: ${{ secrets.GH_PAT }}
        run: |
         git config user.name "GitHub Actions"
         git config user.email "actions@github.com"
         git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}

         TAG="v${{ steps.set_tag.outputs.version_tag }}"
         if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
          echo "Tag ${TAG} already exists on remote, skipping push."
         else
          git tag "${TAG}"
          git push origin "${TAG}"
          echo "Tag ${TAG} created and pushed."
         fi




  minikube:
    needs: tag-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Minikube
        id: minikube
        uses: hiberbee/github-action-minikube@latest
      - name: Get Minikube IP
        run: echo ${{ steps.minikube.outputs.ip }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
         username: ${{ secrets.DOCKER_USERNAME }}
         password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        env:
         VERSION: ${{ needs.tag-and-release.outputs.version_tag }}
        run: |
         docker build -t ${{ secrets.DOCKER_USERNAME }}/sanity:${VERSION} .
         docker push ${{ secrets.DOCKER_USERNAME }}/sanity:${VERSION}

      - name: Replace version in manifests
        env:
         VERSION: ${{ needs.tag-and-release.outputs.version_tag }}
        run: |
         mkdir -p k8s
         sed "s/__VERSION__/${VERSION}/g" deployment.yaml > k8s/deployment-updated.yaml
         sed "s/__VERSION__/${VERSION}/g" sinatra-service.yaml > k8s/service-updated.yaml
         cat k8s/deployment-updated.yaml | grep image

      - name: Ensure Prometheus namespace exists
        run: |
         kubectl get namespace prometheus || kubectl create namespace prometheus

      - name: Apply Kubernetes manifests
        run: |
           kubectl apply -f k8s/deployment-updated.yaml -n prometheus
           kubectl apply -f k8s/service-updated.yaml -n prometheus

      - name: Force rollout
        run: |
          kubectl rollout restart deployment/sinatra-v1 -n prometheus

      - name: Verify pods are running new image version
        run: |
         sleep 15
         kubectl get pods -n prometheus -l app=sinatra -o jsonpath="{range .items[*]}{.metadata.name}:{range .spec.containers[*]}{.image}{'\n'}{end}{end}"

      - name: Apply Prometheus ConfigMap and manifests
        run: |
          kubectl apply -f prometheus-configmap.yaml -n prometheus
          kubectl apply -f k8s/deployment-updated.yaml -n prometheus
          kubectl apply -f k8s/service-updated.yaml -n prometheus
          kubectl apply -f prometheus-deployment.yaml -n prometheus
          kubectl describe pods -n prometheus
          kubectl logs sinatra-v1-64d5df6c5d-6cgks -n 
          kubectl describe pod sinatra-v1-64d5df6c5d-6cgks -n prometheus



      # - name: Restart Prometheus Pod to load new config
      #   run: |
      #     kubectl rollout restart deployment/sinatra-v1 -n prometheus


      - name: Test application health
        run: |
         kubectl port-forward deployment/sinatra-v1 8080:8000 -n prometheus &
         sleep 5
          curl -f http://localhost:8080/health

  rollback:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment on EC2 via kubectl
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Rolling back deployment sinatra-v1"
            kubectl rollout undo deployment/sinatra-v1
            kubectl rollout status deployment/sinatra-v1 --timeout=120s









